#!/usr/bin/env ruby
require 'yaml'
require 'mini_exiftool'

filenames = []
YAML.load_file("index.yaml").keys.grep(/s90/).each do |f|
  dup = filenames.grep(/\/#{File.basename f}/)
  #uids = []
  unless dup.empty?
=begin
    uid = MiniExiftool.new(f)["ImageUniqueID"] 
    uids << uid 
    dup.each { |d| uids << MiniExiftool.new(d)["ImageUniqueID"] }
    unless uids.uniq.size == uids.size
    #if uids.include? uid
      puts '--'
      puts f
      puts dup.join("\n")
    end
    dupids = u
    
    exifs = []
    exifs << MiniExiftool.new(f)
    uids << MiniExiftool.new(f)["ImageUniqueID"] 
    dup.each { |d| exifs << MiniExiftool.new(d) }
    #exifs.each { |e| puts e.to_yaml }
    exifs.each { |e| puts e["ImageUniqueID"] }
=end
    puts '--'
    #puts f.sub(/^.*DCIM/,'')
    #puts dup.collect{|d| d.sub(/^.*DCIM/,'') }.join("\n")
    if f.sub(/^.*DCIM/,'') == dup.collect{|d| d.sub(/^.*DCIM/,'') }.join("\n")
      puts dup
      puts f
    end
  end
  filenames << f
end

=begin
def each_set_of_duplicates(*paths)
  sizes = {}
  Find.find(*paths) do |f|
   (sizes[File.size(f)] ||= []) << f if File.file? f
  end
  sizes.each do |size, files|
    next unless files.size > 1
    md5s = {}
    files.each do |f|
      digest = Digest::MD5.hexdigest(File.read(f))
      (md5s[digest] ||= []) << f
    end
    md5s.each { |sum, files| yield files if files.size > 1 }
  end
end

each_set_of_duplicates(*ARGV) do |f|
  puts "Duplicates: #{f.join(", ")}"
end
=end
