#!/usr/bin/env ruby
require 'yaml'
require 'gtk2'
require 'mini_exiftool'
require File.join ENV['HOME'],"src/fim","config.rb"

@rows = 6
@cols = 6
@size = @rows*@cols
@q_tags = ["0","1","2","3","4"]

class Gdk::Pixbuf
  def adjust(tw,th)
    ratio = [tw/self.width, th/self.height].min
    self.scale(self.width*ratio, self.height*ratio)
  end
end

class MiniExiftool
  def save_keywords keywords
    keywords.uniq!
    if keywords.empty?
      self.keywords = nil
    elsif keywords.size == 1
      self.keywords = keywords.first
    else
      self.keywords = keywords
    end
    self.save
  end
end

def collection?
  @tag.match(/^[A-Z]/) ? true : false
  #@tag == @tag.capitalize and @tag.match(/^[A-Z]/)# !~ /^\d$/ and @tag != '!' and @tag != '*'
end

def thumb(file)
  thumbnail = file.sub(/#{@imagedir}/,@thumbdir).sub(/jpg/i,'png')
  `fim-thumb #{file}` unless File.exists? thumbnail
  thumbnail
end

def move(offset)
  if collection?
    i = @images.index(@current)
    if i+offset >= 0 and i+offset < @images.size
      @images.insert(i+offset,@images.delete_at(i))
      redraw
      File.open(File.join(@dir,"#{@tag}.yaml"),"w+"){|f| f.puts @images.to_yaml}
    end
  end
end

def select(offset)
  curframe = @images.index(@current).modulo(@size)
  idx = @images.index(@current) + offset
  idx = 0 if idx < 0
  idx = @images.size-1 if idx >= @images.size
  curframe += offset
  @current = @images[idx]
  File.open(@currentfile,"w+"){|f| f.print @current}
  if curframe >= 0 and curframe < @size #and idx > 0 and idx < @images.size#and @frames[curframe]
    highlight
  else
    redraw
  end
end

def highlight
  n = @first
  @frames.each do |frame|
    frame.set_state(Gtk::STATE_NORMAL) 
    if @images[n]
      frame.set_state(Gtk::STATE_SELECTED) if @selected.include? @images[n] and @tag != "+"
      frame.set_state(Gtk::STATE_ACTIVE) if @images[n] == @current
    end
    n += 1
  end
end

def tag_input
  tags = @index.collect{|k,v| v}.flatten.compact.uniq.collect{|v| v.to_s}
  current_tags = MiniExiftool.new(@current).keywords.to_a.collect{|t| t.to_s}
  tags.collect!{|t| current_tags.include?(t.to_s) ? "+#{t}" : t.to_s}
  tags += ["*","!"]
  `echo '#{(tags.sort).join("\n")}' | dmenu -b `.chomp.sub(/\+/, '')
end

def save_index image, keywords
  @index[image] = keywords.to_a.collect{|t| t.to_s}
  File.open(@indexfile,"w+"){|f| f.puts @index.to_yaml}
end

def set_tag image, tag
  exif = MiniExiftool.new image
  keywords = exif.keywords.to_a
  keywords = keywords - @q_tags if @q_tags.include?(tag) # unique quality tags
  keywords << tag
  exif.save_keywords keywords
  save_index image, exif.keywords
end

def remove_current_tag
  exif = MiniExiftool.new @current
  keywords = exif.keywords.to_a
  keywords.delete @tag
  exif.save_keywords keywords
  save_index @current, exif.keywords
  idx = @images.index @current
  @images.delete @current
  @current = @images[idx]
  File.open(@currentfile, "w+"){|f| f.print @current}
  File.open(File.join(@dir,"#{@tag}.yaml"),"w+"){|f| f.puts @images.to_yaml}
end

def toggle_tag(tag)
  unless tag.empty?
    exif = MiniExiftool.new(@current)
    keywords = exif.keywords.to_a
    tag = tag.chomp.to_s
    if keywords.include?(tag)
      keywords.delete tag
    else
      keywords = keywords - @q_tags if @q_tags.include?(tag) # unique quality tags
      keywords << tag
    end
    exif.save_keywords keywords
    save_index @current, exif.keywords
    unless keywords.include? @tag
      idx = @images.index @current
      @images.delete @current
      @current = @images[idx]
      File.open(@currentfile, "w+"){|f| f.print @current}
      @images.delete @current
      File.open(File.join(@dir,"#{@tag}.yaml"),"w+"){|f| f.puts @images.to_yaml}
      redraw
    end
  end
end

def redraw
  unless @images.include? @current
    @current = @images.first
    File.open(@currentfile, "w+"){|f| f.print @current}
  end
  if @images.empty?
    @first = 0
  else
    @first = @images.index(@current) - @images.index(@current).modulo(@size)
  end
  n = @first
  @frames.each do |frame|
    if @images[n]
      frame.child.pixbuf = Gdk::Pixbuf.new(thumb(@images[n])).adjust(@tw,@th)
    else
      frame.child.pixbuf = nil
    end
    n += 1
  end
  highlight
end

def load_index
  @index = YAML.load_file(@indexfile)
  @tag = File.read(@tagfile).chomp.to_s
  if collection?
    seq_file = File.join(@dir,"#{@tag}.yaml")
    File.open(seq_file,"w+"){|f| f.puts [].to_yaml} unless File.exists? seq_file
    @images = YAML.load_file(File.join(@dir,"#{@tag}.yaml")) | @index.collect{|k,v| k if v.to_s.include?(@tag)}.compact.sort
    File.open(seq_file,"w+"){|f| f.puts @images.to_yaml}
  else
    case @tag
    when "*"
      @images = @index.keys.sort
    when "!"
      @images = @index.collect{ |k,v| i = v & @q_tags; k if i.empty? or i.size > 1 }.compact.sort
    else
      @images = @index.collect{|k,v| k if v.to_s.include?(@tag)}.compact.sort
    end
  end
  @current = File.read(@currentfile).chomp
  unless @images.include? @current
    @current = @images.first
    File.open(@currentfile, "w+"){|f| f.print @current}
  end
  @selected = @index.collect{|k,v| k if v.include?("+")}.compact
  if @table
    redraw
  else
    @table = Gtk::Table.new(@rows,@cols,true)
    @frames = []
    @first = @images.index(@current) - @images.index(@current).modulo(@size)

    @win.modify_bg(Gtk::STATE_NORMAL,Gdk::Color.parse("black"))
    # draw_table
    @tw = 0.98*@win.screen.width/@cols.to_f
    @th = 0.98*@win.screen.height/@rows.to_f
    n = @first
    @rows.times do |r|
      @cols.times do |c|
        frame = Gtk::Frame.new
        frame.modify_bg(Gtk::STATE_ACTIVE,Gdk::Color.parse("red"))
        frame.modify_bg(Gtk::STATE_SELECTED,Gdk::Color.parse("yellow"))
        frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color.parse("black"))
        image = Gtk::Image.new 
        image.pixbuf = Gdk::Pixbuf.new(thumb(@images[n])).adjust(@tw,@th) if @images[n]
        frame.add image
        @table.attach frame, c, c+1, r, r+1
        @frames << frame
        n += 1
      end
    end
    highlight
    @win.add(@table)
  end
end

clipboard = Gtk::Clipboard.get(Gdk::Selection::CLIPBOARD)
@win = Gtk::Window.new
load_index
@win.signal_connect("key-press-event") do |w,e|
  case Gdk::Keyval.to_name(e.keyval)
  when /^q$|Escape/
    Gtk.main_quit
  when /^h$|Left/
    select -1
  when /^l$|Right/
    select 1
  when /^j$|Down/
    select @cols
  when /^k$|Up/
    select -@cols
  when "b"
    select -@size
  when "space"
    select @size
  when /^g$|Home/
    @current = @images.first
    redraw
  when /^G$|End/
    @current = @images.last
    redraw
  when "K"
    move -@cols
  when "J"
    move @cols
  when "H"
    move -1
  when "L"
    move 1
  when "Return"
    `fim-view`
  when "equal"
    exif = MiniExiftool.new @current
    `echo "#{@current}: #{exif.keywords}" |dmenu`
  when 'slash'
    @tag = tag_input
    File.open(@tagfile, "w+"){|f| f.print @tag}
    load_index
  when "t"
    toggle_tag tag_input
  when "T"
    tag = tag_input
    @images.each{|i| set_tag i, tag}
  when "BackSpace"
    remove_current_tag
    load_index
  when "0"
    toggle_tag "0"
  when "parenright"
    File.open(@tagfile, "w+"){|f| f.print 0}
    load_index
  when "1"
    toggle_tag "1"
  when "exclam"
    File.open(@tagfile, "w+"){|f| f.print 1}
    load_index
  when "2"
    toggle_tag "2"
  when "at"
    File.open(@tagfile, "w+"){|f| f.print 2}
    load_index
  when "3"
    toggle_tag "3"
  when "numbersign"
    File.open(@tagfile, "w+"){|f| f.print 3}
    load_index
  when "4"
    toggle_tag "4"
  when "dollar"
    File.open(@tagfile, "w+"){|f| f.print 4}
    load_index
  when "s"
    toggle_tag "+"
  when "S"
    File.open(@tagfile, "w+"){|f| f.print "+"}
    load_index
  when "w"
    if collection? 
      name = tag_input 
      File.open(File.join(@dir,"#{name}.yaml"),"w+"){|f| f.puts @images.to_yaml}
      @images.each{|i| set_tag i, name}
      @images.each{|i| set_tag i, "4"}
    end
  when "r"
    puts `cp -v #{@current} #{@current}.original`
    puts `jpegtran -copy all -rotate 90 #{@current}.original > #{@current}`
    `fim-thumb #{@current}`
    curframe = @images.index(@current).modulo(@size)
    @frames[curframe].child.pixbuf = Gdk::Pixbuf.new(thumb @current).adjust(@tw,@th)
  when 'c'
    `fim-crop`
    load_index
  when 'p'
    `fim-print #{@current}`
  when "y"
    clipboard.text = @current
    clipboard.store
  else
    #puts '"'+Gdk::Keyval.to_name(e.keyval)+'"'
  end
end

@win.signal_connect("destroy") { Gtk.main_quit }

@win.show_all
Gtk.main
