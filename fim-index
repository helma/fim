#!/usr/bin/env ruby
require 'yaml'
require 'gtk2'
require 'mini_exiftool'

@rows = 6
@cols = 6
@size = @rows*@cols
@q_tags = ["0","1","2","3","4"]

class Gdk::Pixbuf
  def adjust(tw,th)
    ratio = [tw/self.width, th/self.height].min
    self.scale(self.width*ratio, self.height*ratio)
  end
end

def thumb(file)
    thumbnail = file.sub(/images/,'thumbs').sub(/jpg/i,'png')
    `./fim-thumb #{file}` unless File.exists? thumbnail
    thumbnail
end

def move(offset)
  curframe = @images.index(@current).modulo(@size)
  idx = @images.index(@current) + offset
  idx = 0 if idx < 0
  idx = @images.size-1 if idx >= @images.size
  curframe += offset
  @current = @images[idx]
  File.open("current","w+"){|f| f.print @current}
  if curframe >= 0 and curframe < @size #and idx > 0 and idx < @images.size#and @frames[curframe]
    highlight
  else
    redraw
  end
end

def highlight
  n = @first
  @frames.each do |frame|
    frame.set_state(Gtk::STATE_NORMAL) 
    if @images[n]
      frame.set_state(Gtk::STATE_SELECTED) if @selected.include? @images[n]
      frame.set_state(Gtk::STATE_ACTIVE) if @images[n] == @current
    end
    n += 1
  end
end

def tag_input
  tags = @index.collect{|k,v| v}.flatten.compact.uniq.collect{|v| v.to_s}
  tags += ["*","!"]
  `echo '#{(tags.sort).join("\n")}' | dmenu -b `
end

def toggle_tag(tag)
  exif = MiniExiftool.new(@current)
  keywords = exif.keywords.to_a
  tag = tag.to_s
  if keywords.include?(tag)
    keywords.delete tag
  else
    keywords = keywords - @q_tags if @q_tags.include?(tag) # unique quality tags
    keywords << tag
  end
  keywords.uniq!
  if keywords.empty?
    exif.keywords = nil
  elsif keywords.size == 1
    exif.keywords = keywords.first
  else
    exif.keywords = keywords
  end
  exif.save
  @index[@current] = exif.keywords.to_a.collect{|t| t.to_s}
  File.open("index.yaml","w+"){|f| f.puts @index.to_yaml}
  load_index
end

=begin
def tag(tag)
#  if File.read("tag").chomp == 'selected'
#    @images.each { |i| toggle_tag i, tag }
#  else
    toggle_tag @current, tag
#  end
  load_index
end
=end

def redraw
  unless @images.include? @current
    @current = @images.first
    File.open("current", "w+"){|f| f.print @current}
  end
  if @images.empty?
    @first = 0
  else
    @first = @images.index(@current) - @images.index(@current).modulo(@size)
  end
  n = @first
  @frames.each do |frame|
    if @images[n]
      frame.child.pixbuf = Gdk::Pixbuf.new(thumb(@images[n])).adjust(@tw,@th)
    else
      frame.child.pixbuf = nil
    end
    n += 1
  end
  highlight
end

def load_index
  @index = YAML.load_file("index.yaml")
  tag = File.read("tag").chomp
  case tag
  when "*"
    @images = @index.keys.sort
  when "!"
    @images = @index.collect{ |k,v| i = v & @q_tags; k if i.empty? or i.size > 1 }.compact.sort
  else
    @images = @index.collect{|k,v| k if v.to_s.include?(tag)}.compact.sort
  end
  @current = File.read("current").chomp
  unless @images.include? @current
    @current = @images.first
    File.open("current", "w+"){|f| f.print @current}
  end
  @selected = @index.collect{|k,v| k if v.include?("selected")}.compact
  if @table
    redraw
  else
    @table = Gtk::Table.new(@rows,@cols,true)
    @frames = []
    @first = @images.index(@current) - @images.index(@current).modulo(@size)

    @win.modify_bg(Gtk::STATE_NORMAL,Gdk::Color.parse("black"))
    # draw_table
    @tw = 0.98*@win.screen.width/@cols.to_f
    @th = 0.98*@win.screen.height/@rows.to_f
    n = @first
    @rows.times do |r|
      @cols.times do |c|
        frame = Gtk::Frame.new
        frame.modify_bg(Gtk::STATE_ACTIVE,Gdk::Color.parse("red"))
        frame.modify_bg(Gtk::STATE_SELECTED,Gdk::Color.parse("yellow"))
        frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color.parse("black"))
        image = Gtk::Image.new 
        image.pixbuf = Gdk::Pixbuf.new(thumb(@images[n])).adjust(@tw,@th) if @images[n]
        frame.add image
        @table.attach frame, c, c+1, r, r+1
        @frames << frame
        n += 1
      end
    end
    highlight
    @win.add(@table)
  end
end

clipboard = Gtk::Clipboard.get(Gdk::Selection::CLIPBOARD)
@win = Gtk::Window.new
load_index
@win.signal_connect("key-press-event") do |w,e|
  case Gdk::Keyval.to_name(e.keyval)
  when /^q$|Escape/
    Gtk.main_quit
  when /^h$|Left/
    move -1
  when /^l$|Right/
    move 1
  when /^j$|Down/
    move @cols
  when /^k$|Up/
    move -@cols
  when "b"
    move -@size
  when "space"
    move @size
  when "g"
    @current = @images.first
    redraw
  when "G"
    @current = @images.last
    redraw
  when "Return"
    `./fim-view`
  when "equal"
    exif = MiniExiftool.new @current
    `echo "#{@current}: #{exif.keywords}" |dmenu`
  when 'slash'
    tag = tag_input
    File.open("tag", "w+"){|f| f.print tag}
    load_index
  when "t"
    toggle_tag tag_input
  when /^\d$/
    toggle_tag Gdk::Keyval.to_name(e.keyval)
  when "parenright"
    File.open("tag", "w+"){|f| f.print 0}
    load_index
  when "exclam"
    File.open("tag", "w+"){|f| f.print 1}
    load_index
  when "at"
    File.open("tag", "w+"){|f| f.print 2}
    load_index
  when "numbersign"
    File.open("tag", "w+"){|f| f.print 3}
    load_index
  when "s"
    toggle_tag "selected"
  when "S"
    File.open("tag", "w+"){|f| f.print "selected"}
    load_index
  when "m"
    if File.read("tag").chomp == "selected"
      id = @index.collect{|k,v| v.grep(/motiv/).sub(/motiv/,'').to_i unless v.grep(/motiv/).empty?}.flatten.uniq.sort.last
      id = -1 unless id
      id += 1
      @images.each do |i|
        exif = MiniExiftool.new i
        exif.keywords.to_a << "motiv#{id}"
        exif.save
        @index[i] = exif.keywords.to_a.collect{|t| t.to_s}
      end
      File.open("index.yaml","w+"){|f| f.puts @index.to_yaml}
    end
  when "r"
    puts `cp -v #{@current} #{@current}.original`
    puts `jpegtran -copy all -rotate 90 #{@current}.original > #{@current}`
    `./fim-thumb #{@current}`
    curframe = @images.index(@current).modulo(@size)
    @frames[curframe].child.pixbuf = Gdk::Pixbuf.new(thumb @current).adjust(@tw,@th)
  when 'c'
    `./fim-crop`
    load_index
  when 'p'
    `./fim-print #{@current}`
  when "y"
    clipboard.text = @current
    clipboard.store
  else
    #puts Gdk::Keyval.to_name(e.keyval)
  end
end
@win.signal_connect("destroy") { Gtk.main_quit }

@win.show_all
Gtk.main
